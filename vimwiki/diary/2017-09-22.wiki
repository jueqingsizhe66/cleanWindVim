= weather:sunny =

https://github.com/HopeFOAM/HopeFOAM
https://github.com/barbagroup/CFDPython
http://lorenabarba.com/

== PETIBM ==
Pet IBM  flow solver for navier stokes equation
    -PetIBM solves the 2D and 3D incompressible Navier-Stokes equations using a projection method with an immersed-boundary method (IBM). Currently, two IBMs are implemented 
https://github.com/barbagroup/PetIBM


== Petsc  c language ==    
 https://bitbucket.org/petsc/petsc
 
 
 == HiFiLES ==
https://github.com/HiFiLES/HiFiLES-solver 



== Latex template ==
https://github.com/Lixinyi-DUT/DLUTLaTeXTemplate



== Tenser flow ==

https://github.com/tensorflow/tensorflow


== jupiter ==

http://nbviewer.jupyter.org/github/barbagroup/Caminos/blob/master/1--What_is_Jupyter.ipynb
What is Jupyter?

Jupyter is a way of computing and doing data science right on your browser. It gives you a Notebook — this document we're looking at now.

A Jupyter Notebook can contain: formatted text, images, videos, pretty math equations, and executable computer code. By "executable," we mean that you run the bits of code, right in the document, and get some output displayed for you. This interactive way of computing, mixed with the text, allows you to tell a story (even to yourself) with extra powers!

== Python for Science ==
http://nbviewer.jupyter.org/github/barbagroup/Caminos/blob/master/2--Python_for_Science.ipynb

Python is free, it is open source, and it has a huge community.

Python is one of the most popular and loved programming languages in the world!

The CodeEval blog published its data on the "Most Popular Coding Languages" on February 2016. It shows Python in the first place in popularity, based on usage in the CodeEval community. Meanwhile, the StackOverflow trends graph shows increasing interest in Python during the last 5 years.

Python can be used for many things: managing data bases, creating graphical user interfaces, making websites, and much more… including science. Because of the many uses, the world of Python includes many, many Libraries (you load the parts that you need).

In science, the two libraries that are king and queen of the world are: NumPy, and Matplotlib.


== PyGBe: Python, GPUs and Boundary elements for biomolecular electrostatics == 
https://github.com/barbagroup/pygbe


== cuIBM: a GPU-based immersed boundary method code ==
https://github.com/barbagroup/cuIBM

We also provide a detailed description for several examples:

    Lid-driven cavity flow;
    Flow around an impulsively started cylinder;
    Flow generated by a flapping wing;



== 最小化理论 ==
https://github.com/YaojieYu/The-Theoretical-Minimum

https://github.com/YaojieYu/The-Theoretical-Minimum/blob/master/lecture1/lecture1.org


=== 动力系统 ===
在经典力学中,我们假设系统随时间光滑的演化,其中没有间断和跳跃.我们称这种方式是连续的.显然,在这个例子中,系统的运行不是连续的,而是离散的.此时假设系统的离散的时间步以整数表示.

随着时间变化的系统称为动力系统.除了包含相空间之外,一个动力系统必须包括动力法则,或者称其为运动规则.动力法则会根据该时刻的状态告诉我们下一时刻的状态.

一个非常简单的动力规则是无论此时刻的是什么状态,下一时刻仍然保持该状态.在这个例子中,物体的轨迹只有两种可能:HHHHHH…和TTTT….

另一个动力规则是无论此时状态如何,下一时刻的状态永远是该时状态的对立状态.我们可以通过示意图来表示这两种规则.图2表示第一个法则,其中箭头从H到H或者从T到T.可以看出,非常容易预测未来:如果从H开始,则系统会始终保持H状态;如果从T开始,则系统将停留在T状态.
记住这口号:必须有一个箭头告诉你将去哪里和一个箭头告诉你从哪里来
动力系统的规则必须是确定性的和可逆的这一定律对经典力学是如此的重要以至于我们有时忘了提及.事实上,它甚至没有一个名字.我们可以把它叫做第一定律,但不幸的是我们已经有了两个第一定律-牛顿第一定律和热力学第一定律.而且,在热力学中甚至已经有了一个第零定律.因此,我们不得不称其为负一定律以体现这所有物理定律中一毫无例外最基本的一个-信息守恒定律.信息守恒的含义是对每一状态,均存在一个进入箭头和一个出去箭头.这保证了你永远不会失去出发的路径.

=== 精度的极限 ===

拉普拉斯对于世界的可预测性过于乐观,即使是对经典物理.他肯定会同意对未来的预测需要对统治现实世界的动力学定律有完整的了解,同时也需要无穷的计算能力,他称这种能力为”为分析提供大量数据的无穷智能”.但是,他仍然低估了另外一个重要的部分-能够获得足够精度的初始条件的能力.想象一个有一百万面的骰子,给每个面都涂上足够接近但却有微小差异的单精度整数.如果一个人已知道骰子的运动规律,并且确定了骰子初始时刻的数字,那他就能够预测未来时刻骰子的状态.但是如果拉普拉斯的”无穷智能”遇到了一点视觉模糊,以至于不能辨别骰子不同面的细微区别,那么他的预测能力将会受到限制.

在现实世界中,情况可能更加糟糕-相空间状态的个数不仅是无穷的,而且是连续的.换句话说,它是由实数集合来标记其状态的.实数是如此的稠密,以至于任何两个实数之间都能找到无穷多个的实数.在实际实验中,我们把将数字从它周围数字中分辨出来的能力叫做”分辨力”,并且任何实际观测者的分辨力都是有限的.理论上,我们无法获得无穷精度的初始条件.在大部分情况下,初始条件的极微小差异最终会导致输出结果的巨大差别.这种现象被称为混沌(Chaos).如果一个系统是混沌的(事实上大部分系统都是),那就意味着无论我们的分辨力有多强,该系统能够被预测的时间都是有限的.完全的预测能力是无法获得的,仅仅是因为我们的分辨力是有限的.


=== 相空间 ===
在物理学中,把一个系统所有状态的集合称为相空间(State-space).相空间并不是我们平常意义上的空间,它是一个数学集合,其中的每一个元素都表征系统某一个可能出现状态.在这个例子中,相空间的状态只有一个,我们称其为Heads(意思是头朝上),简记H.由于系统只有一个状态,预测其未来变得非常简单-系统状态没有变化进而观测到任意时刻的输出总是H.





https://github.com/bazzinotti/dl-baidu-pdf



高校管理与协作(跨部分沟通)

