= Contents =
    - [[#brian’s Guide to Solving Any Perl Problem: Appendix B - Mastering Perl|brian’s Guide to Solving Any Perl Problem: Appendix B - Mastering Perl]]
    - [[#My Philosophy of Problem-Solving|My Philosophy of Problem-Solving]]
        - [[#My Philosophy of Problem-Solving#1.  It is not personal|1.  It is not personal]]
        - [[#My Philosophy of Problem-Solving#2.  Personal responsibility|2.  Personal responsibility]]
        - [[#My Philosophy of Problem-Solving#3.  Change how you do things|3.  Change how you do things]]
    - [[#My Method|My Method]]
        - [[#My Method#1.  Does your program compile with strictures?|1.  Does your program compile with strictures?]]
        - [[#My Method#2.  What is the warning?|2.  What is the warning?]]
        - [[#My Method#3.  Solve the first problem first!|3.  Solve the first problem first!]]
        - [[#My Method#4.  Look at the code before the line number in the error message!|4.  Look at the code before the line number in the error message!]]
        - [[#My Method#5.  Is the value what you think it is?|5.  Is the value what you think it is?]]
        - [[#My Method#6.  Are you using the function correctly?|6.  Are you using the function correctly?]]
        - [[#My Method#7.  Are you using the right special variable?|7.  Are you using the right special variable?]]
        - [[#My Method#8.  Do you have the right version of the module?|8.  Do you have the right version of the module?]]
        - [[#My Method#9.  Have you made a small test case?|9.  Have you made a small test case?]]
        - [[#My Method#10.  Did you check the environment?|10.  Did you check the environment?]]
        - [[#My Method#11.  Have you checked Google?|11.  Have you checked Google?]]
        - [[#My Method#12.  Have you profiled the application?|12.  Have you profiled the application?]]
        - [[#My Method#13. Which test fails?|13. Which test fails?]]
        - [[#My Method#14.  Did you talk to the bear?|14.  Did you talk to the bear?]]
        - [[#My Method#15.  Does the problem look different on paper?|15.  Does the problem look different on paper?]]
        - [[#My Method#15.  Have you watched The Daily Show with Jon Stewart?|15.  Have you watched The Daily Show with Jon Stewart?]]
        - [[#My Method#17.  Have you packed your ego?|17.  Have you packed your ego?]]
    - [[#Some Stupid Things I''ve Done and Still Do|Some Stupid Things I''ve Done and Still Do]]
        - [[#Some Stupid Things I''ve Done and Still Do#1. Am I editing the right file?|1. Am I editing the right file?]]
        - [[#Some Stupid Things I''ve Done and Still Do#2. Did I run make again?|2. Did I run make again?]]
        - [[#Some Stupid Things I''ve Done and Still Do#3. Am I running the right perl?|3. Am I running the right perl?]]

[[#crap]]

[[#pringout]]

[[#relax]]

[[#Verify]]


= brian’s Guide to Solving Any Perl Problem: Appendix B - Mastering Perl =

---------

by brian d foy

This excerpt is from Mastering Perl.
This is the third in O'Reilly's series of landmark Perl tutorials, which started with Learning Perl, the bestselling introduction that taught you the basics of Perl syntax, and Intermediate Perl, which taught you how to create re-usable Perl software. Mastering Perl pulls everything together to show you how to bend Perl to your will.

After several years of teaching Perl and helping other people solve their Perl problems, I wrote a guide that showed how I think through a problem. It’s appeared on a couple of web sites and there are even a couple of translations.

Some of the stuff I did unconsciously, and those are the hardest things to pass on to a new programmer. Now that I have this guide, other people can develop their own problem-solving skills. It might not solve all of your Perl problems, but it’s a good way to try.

----------

= My Philosophy of Problem-Solving =

I believe in three things when it comes to programming, or even anything else I do.
==1.  It is not personal ==

:crap:

a) Forget about code ownership. You may think yourself an artist, but even the Old Masters produced a lot of crap. Everybody’s code is crap, which means my code is crap and your code is crap. Learn to love that. When you have a problem, your first thought should be “Something is wrong with my crappy code.” That means you do not get to blame Perl. It is not personal.
b) Forget about how you do things. If the way you did things worked, you would not be reading this. That is not a bad thing. It is just time to evolve. We’ve all been there.

}}}
==2.  Personal responsibility ==

a) If you have a problem with your program it is just that—-your problem. You should do as much to solve it by yourself as you can.
   `Remember, everyone else has their own programs, which means they have their own problems`.
   Do your homework and give it your best shot before you bother someone else with your problems.
b) If you honestly try everything in this guide and still cannot solve the problem, you have given it your best shot and it is time to bother someone else.

==3.  Change how you do things ==

Fix things so you do not have the same problem again. The problem is probably how you code, not what you code.
Change the way you do things to make your life easier.
Do not make Perl adapt to you, because it won’t. Adapt to Perl. It is just a language, not a way of life.

= My Method =

==1.  Does your program compile with strictures? ==

a) If you aren’t already using strictures, turn it on. Perl gurus are gurus because they use strict, which leaves them more time to solve other problems, learn new things, and upload working modules to CPAN.
b) You can turn on strictures within the code with the strict pragma:
   ` use strict;`
c) You can turn on strictures from the command line with perl’s -M switch:
    `perl -Mstrict program.pl`
d) You may be annoyed at strictures, but after a couple of weeks of programming with them turned on, you’ll write better code, spend less time chasing simple errors, and probably won’t need this guide.
==2.  What is the warning? ==
    Perl can warn you about a lot of questionable constructs. Turn on warnings and help Perl help you.
a) You can use perl’s -w switch in the shebang line:
    `#!/usr/bin/perl -w`
b) You can turn on warnings from the command line:
    `$ perl -w program.pl`
c) Lexical warnings have all sorts of interesting features. See the warnings pragma documentation for the details:
    `use warnings;`

d) If you don’t understand a warning, you can look up a verbose version of the warning in perldiag or you can use the diagnostics pragma in your code:
    `use diagnostics;`
==3.  Solve the first problem first! ==

    After you get error or warning messages from perl, fix the first message then see if perl still issues the other messages. Those extra messages may be artifacts of the first problem.
==4.  Look at the code before the line number in the error message! ==

    Perl gives you warning messages when it gets worried and not before. By the time perl gets worried, the problem has already occurred and the line number perl is on may actually be after the problem. Look at the couple of expressions before the line number in the warning.
==5.  Is the value what you think it is? ==

    Don’t guess! Verify everything! Actually examine the value right before you want to use it in an expression.

a) The best debugger in the universe is print:
    `print STDERR "The value is [$value]\n";`
    I enclose $value in brackets so I can see any leading or trailing whitespace or newlines.
b) If I have anything other than a scalar, I use `Data::Dumper` to print the data structures:
{{{
    require Data::Dumper;
    print STDERR "The hash is ", Data::Dumper::Dumper( %hash ), "\n";

}}}
c) If the value is not what you think it is, back up a few steps and try again! Do this until you find the point at which the value stops being what you think it should be!
d) You can also use the built-in Perl debugger with perl’s -d switch. See perldebug for details:
    `perl -d program.pl`
    You can also use other debuggers or development environments, such as ptkdb (a graphical debugger based on Tk) or Komodo (ActiveState’s Perl IDE based on Mozilla). I cover debugging in Chapter 4, Debugging Perl.
==6.  Are you using the function correctly? ==

    I have been programming Perl for quite a long time and `I still look at perlfunc almost every day`.
    Some things I just cannot keep straight, and sometimes I am so sleep-deprived that I take leave of all of my senses and
    wonder why sprintf() does not print to the screen.
a) You can look up a particular function with the perldoc command and its -f switch.
    `perldoc -f function_name`
b) If you’re using a module, check the documentation to make sure you are using it in the right way. You can check the documentation for the module using perldoc:
    `perldoc Module::Name`
==7.  Are you using the right special variable? ==

    Again, I constantly refer to perlvar. Well, not really since I find The `Perl Pocket Reference` much easier to use.
==8.  Do you have the right version of the module? ==

    Some modules change behavior between versions. Do you have the version of the module that you think you have? You can check the installed module version with a simple perl one-liner:

    `perl -MModule::Name -le 'print Module::Name->VERSION';`
a) If you read most of your documentation off of the local machine, like at http://perldoc.perl.org or http://search.cpan.org, then you are more likely to encounter version differences in documentation.
==9.  Have you made a small test case? ==

a) If you’re trying something new or think a particular piece of code is acting funny, write the shortest possible program to do just that piece.
    This removes most of the other factors from consideration.

b) If the small test program does what it thinks it does, the problem probably isn’t in that code. If the program doesn’t do what you think it should, then perhaps you have found your problem.
==10.  Did you check the environment? ==

    Some things depend on environment variables.
a) Are you sure that they are set to the right thing?
b) Is your environment the same that the program will see when it runs? Remember that programs intended for CGI programs or cron jobs may see different environments than those in your interactive shell, especially on different machines.Perl stores the environment in %ENV.
c) If you need one of those variables, be ready to supply a default value if it does not exist, even if only for testing.
d) If you still have trouble, inspect the environment:
{{{
    require Data::Dumper;
    print STDERR Data::Dumper::Dumper( \%ENV );

}}}
==11.  Have you checked Google? ==

a) If you have a problem, somebody else has probably already had that problem.
b) See if one of those other people posted something to the Usenet group comp.lang.perl.misc by searching Google Groups (http://groups.google.com). The difference between people who ask questions on Usenet and those who answer them is the ability to use Google Groups effectively.
==12.  Have you profiled the application? ==

a) If you want to track down the slow parts of the program, have you profiled it? Let `Devel::SmallProf` do the heavy lifting for you. It counts the times perl executes a line of code as well as how long it takes and prints a nice report. I cover profiling in Chapter 5, Profiling Perl.
==13. Which test fails? ==

a) If you have a test suite, which test fails? You should be able to track down the error very quickly since each test will only exercise a little bit of code.
b) If you don’t have a test suite, why not make one?
c) If you have a really small program or this is a one-off program, then I’m not going to make you write a couple of tests. Anything other than that could really benefit from some test programs. The `Test::More` module makes this extremely simple, and
d) if you program your script as a modulino as in Chapter 18, Modules As Programs, you have all the tools of module development available for your program.

==14.  Did you talk to the bear? ==

    `Explain your problem aloud. Actually say the words.`
    For a couple of years I had the pleasure of working with a really good programmer who could solve almost anything.
    When I got really stuck I would walk over to his desk and start to explain my problem.
    Usually I wouldn’t make it past the third sentence without saying,
    `Nevermind—I got it.`  He almost never missed either.
    Since you’ll probably need to do this so much, I recommend some sort of plush toy to act as your Perl therapist so you don’t annoy your colleagues. I have a small bear that sits on my desk and I explain problems to him. My girlfriend does not even pay attention when I talk to myself anymore.

==15.  Does the problem look different on paper? ==

:pringout:

    You have been staring at the computer screen, so maybe a different medium will let you look at things in a new way. Try looking at a printout of your program.

==15.  Have you watched The Daily Show with Jon Stewart? ==

:relax:

a) Seriously. Perhaps you do not like Jon Stewart, so choose something else. Take a break.
b) Stop thinking about the problem for a bit and let your mind relax.
c) Come back to the problem later and the fix may become immediately apparent.

==17.  Have you packed your ego? ==

:vertify:

a) If you’ve have made it this far, the problem may be psychological.
b) You might be emotionally attached to a certain part of the code, so you do not change it.
c) You might also think that everyone else is wrong but you. When you do that, you don’t seriously consider the most likely source of bugs—yourself.
d) Do not ignore anything. Verify everything.

= Some Stupid Things I've Done and Still Do =

I have yet to met a developer who doesn't create bugs or struggle to track down a problem.
The better programmers just do it with bigger and nastier bugs.
Still, I find that sometimes I waste time doing really stupid things.

==1. Am I editing the right file? ==

With multiple Git clones and terminal sessions connected to different hosts, I've more than a couple of times found myself editing files in one spot but
not seeing the results in another spot.
I keep running the program or the tests, but nothing seems to fix it. The `print` statements I put in never come up in
the output.
When I realize that's happening, I have to step back to make sure I'm actually running the version i think I am, that I've saved the file I'm working
on, and so on.

==2. Did I run make again? ==

I mostly develop modules, so I check things by editing the module or test files. If I'm testing a particular issue, I usually run only that test file:

`% perl -Mblib t/some_test.t`

I like running tests like this so I can see the raw output without a TAP consumer getting in the way.

If I don't run make(or ./Build) again, tmy changes to the module file don't show up in blib/ so my test file doesn't see it. The tests continue to fail and
I keep trying to make them pass. I need to run make again, so I add it before perl in one of these ways:
{{{
% make; perl -Mblib t/some_test.t
% make && perl -Mblib t/some_test.t
}}}

Sometimes I need to really start over, so I need to regenerate the Makefile too:

{{{
% perl Makefile.pl && make && perl -Mblib t/some_test.t
}}}

== 3. Am I running the right perl? ==

I have many perls installed so I can test on different versions. Just as I need to verify that I'm running the right version of the source code,
sometimes I need to check that I'm running the right perl.
If I'm running a different perl, I might have different versions of modules installed. This is a rare situation, thought,
but it has happened to me.


[65] In French: http://articles.mongueurs.net/traductions/guide_brian.html; and Chinese: http://wiki.perlchina.org/main/show/brian's%20Guide%20to%20Solving%20Any%20Perl%20Problem.
If you enjoyed this excerpt, buy a copy of Mastering Perl

来自 <http://archive.oreilly.com/pub/a/perl/excerpts/9780596527242/brians-guide.html>

