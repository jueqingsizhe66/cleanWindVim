= 计算Askervein山算例 =

= 关于vim和emacs =

https://www.zhihu.com/question/284466918

很多人都觉得“某些工具”做得比vim和emacs的功能好。单看这个功能，是没有问题的，但情况发展了，这些工具就让人不爽了，或者没有人愿意继续维护它了（可能就是用的人越来越少
了）。我对emacs不熟悉，但vim我是用了20多年了，vim做了这么久，几乎没有删除过任何一个老功能，这样能不能让你看到它牛逼之处？很多其他工具可能真的让你一时爽，但他们的语义逻辑是无法向前演进的，升级后是必须改的，不改就不好用。但修改就是对你过去经验的颠覆。熟悉这些工具的工程师其实常常不是能在这个领域持续下去的程序员。能持续在程序员这个领域一直工作下去的其实只是整个工程师群体的一部分。大部分人只是过客。所以，你不能拒绝不断有这些新工具的出现。但能流传下去的，只有长期写程序的程序员用的工具。要做到这一点，只有非常资深的程序员自己控制加入什么功能，才能做到。如果你们认真看过vim的手册，就会发现，vim的功能设计的时候，是连你下一个命令的时候手放在什么位置，脑子里面怎么记这些命令，都考虑到的，其实相当高明，但你自己不是天天用，天天写程序，写了很久，你是感受不到的。所以表面上看来vim和emacs都没有什么了不起，但他们始终活着，真正用它的程序员也懒得给你解释他们为什么要用，但他们都是资深的程序员，所以很多学习者从“追星”的角度，神化这两个工具（因为使用它们正好是这些“前辈程序员”的一个特征），给你吹它们有多好，但其实他们都没有吹到点子上。vim的好，不是它的插件，不是它的可定制性。而在于做到现在，它的架构还有极高的自由度。它的好处不是它有多好（虽然确实很好），而是它“不妨碍”你变得多好。你远程用也行，本地用也行，在它的窗口里开term也行，直接起term也行，用term来过滤也行，直接用来编辑也行……反正它“不妨碍”。恶劣的环境它起得来，好的环境它用得上。简单说，因为它在那里，所以我用了，我连用它的理由都不知道。但其他“名声赫赫”的工具，都做不到。到头来，我再证明了一次，架构设计，其政察察,其民缺缺，求名失道，求道失名。

